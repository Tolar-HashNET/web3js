// source: tolar/proto/blockchain.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var tolar_proto_storage_pb = require('../../tolar/proto/storage_pb.js');
goog.object.extend(proto, tolar_proto_storage_pb);
var tolar_proto_transaction_pb = require('../../tolar/proto/transaction_pb.js');
goog.object.extend(proto, tolar_proto_transaction_pb);
goog.exportSymbol('proto.tolar.proto.GetBalanceRequest', null, global);
goog.exportSymbol('proto.tolar.proto.GetBalanceResponse', null, global);
goog.exportSymbol('proto.tolar.proto.GetBlockByHashRequest', null, global);
goog.exportSymbol('proto.tolar.proto.GetBlockByIndexRequest', null, global);
goog.exportSymbol('proto.tolar.proto.GetBlockCountRequest', null, global);
goog.exportSymbol('proto.tolar.proto.GetBlockCountResponse', null, global);
goog.exportSymbol('proto.tolar.proto.GetBlockResponse', null, global);
goog.exportSymbol('proto.tolar.proto.GetBlockchainInfoRequest', null, global);
goog.exportSymbol('proto.tolar.proto.GetBlockchainInfoResponse', null, global);
goog.exportSymbol('proto.tolar.proto.GetCompleteBlockByIndexResponse', null, global);
goog.exportSymbol('proto.tolar.proto.GetGasEstimateResponse', null, global);
goog.exportSymbol('proto.tolar.proto.GetLatestBlockRequest', null, global);
goog.exportSymbol('proto.tolar.proto.GetNonceRequest', null, global);
goog.exportSymbol('proto.tolar.proto.GetNonceResponse', null, global);
goog.exportSymbol('proto.tolar.proto.GetPaginatedBlocksByIndexRequest', null, global);
goog.exportSymbol('proto.tolar.proto.GetPaginatedBlocksByIndexResponse', null, global);
goog.exportSymbol('proto.tolar.proto.GetPastEventsRequest', null, global);
goog.exportSymbol('proto.tolar.proto.GetPastEventsResponse', null, global);
goog.exportSymbol('proto.tolar.proto.GetTransactionListRequest', null, global);
goog.exportSymbol('proto.tolar.proto.GetTransactionListResponse', null, global);
goog.exportSymbol('proto.tolar.proto.GetTransactionReceiptRequest', null, global);
goog.exportSymbol('proto.tolar.proto.GetTransactionReceiptResponse', null, global);
goog.exportSymbol('proto.tolar.proto.GetTransactionRequest', null, global);
goog.exportSymbol('proto.tolar.proto.GetTransactionResponse', null, global);
goog.exportSymbol('proto.tolar.proto.PastEvent', null, global);
goog.exportSymbol('proto.tolar.proto.TryCallTransactionResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetBlockCountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.GetBlockCountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetBlockCountRequest.displayName = 'proto.tolar.proto.GetBlockCountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetBlockCountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.GetBlockCountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetBlockCountResponse.displayName = 'proto.tolar.proto.GetBlockCountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetLatestBlockRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.GetLatestBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetLatestBlockRequest.displayName = 'proto.tolar.proto.GetLatestBlockRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetBlockByHashRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.GetBlockByHashRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetBlockByHashRequest.displayName = 'proto.tolar.proto.GetBlockByHashRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetBlockByIndexRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.GetBlockByIndexRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetBlockByIndexRequest.displayName = 'proto.tolar.proto.GetBlockByIndexRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetBlockResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tolar.proto.GetBlockResponse.repeatedFields_, null);
};
goog.inherits(proto.tolar.proto.GetBlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetBlockResponse.displayName = 'proto.tolar.proto.GetBlockResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetPaginatedBlocksByIndexRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.GetPaginatedBlocksByIndexRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetPaginatedBlocksByIndexRequest.displayName = 'proto.tolar.proto.GetPaginatedBlocksByIndexRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tolar.proto.GetPaginatedBlocksByIndexResponse.repeatedFields_, null);
};
goog.inherits(proto.tolar.proto.GetPaginatedBlocksByIndexResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetPaginatedBlocksByIndexResponse.displayName = 'proto.tolar.proto.GetPaginatedBlocksByIndexResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetCompleteBlockByIndexResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.GetCompleteBlockByIndexResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetCompleteBlockByIndexResponse.displayName = 'proto.tolar.proto.GetCompleteBlockByIndexResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.GetTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetTransactionRequest.displayName = 'proto.tolar.proto.GetTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetTransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.GetTransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetTransactionResponse.displayName = 'proto.tolar.proto.GetTransactionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetBlockchainInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.GetBlockchainInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetBlockchainInfoRequest.displayName = 'proto.tolar.proto.GetBlockchainInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetBlockchainInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.GetBlockchainInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetBlockchainInfoResponse.displayName = 'proto.tolar.proto.GetBlockchainInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetTransactionReceiptRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.GetTransactionReceiptRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetTransactionReceiptRequest.displayName = 'proto.tolar.proto.GetTransactionReceiptRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetTransactionReceiptResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tolar.proto.GetTransactionReceiptResponse.repeatedFields_, null);
};
goog.inherits(proto.tolar.proto.GetTransactionReceiptResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetTransactionReceiptResponse.displayName = 'proto.tolar.proto.GetTransactionReceiptResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetTransactionListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tolar.proto.GetTransactionListRequest.repeatedFields_, null);
};
goog.inherits(proto.tolar.proto.GetTransactionListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetTransactionListRequest.displayName = 'proto.tolar.proto.GetTransactionListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetTransactionListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tolar.proto.GetTransactionListResponse.repeatedFields_, null);
};
goog.inherits(proto.tolar.proto.GetTransactionListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetTransactionListResponse.displayName = 'proto.tolar.proto.GetTransactionListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetBalanceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.GetBalanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetBalanceRequest.displayName = 'proto.tolar.proto.GetBalanceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetBalanceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.GetBalanceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetBalanceResponse.displayName = 'proto.tolar.proto.GetBalanceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetNonceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.GetNonceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetNonceRequest.displayName = 'proto.tolar.proto.GetNonceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetNonceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.GetNonceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetNonceResponse.displayName = 'proto.tolar.proto.GetNonceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.TryCallTransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.TryCallTransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.TryCallTransactionResponse.displayName = 'proto.tolar.proto.TryCallTransactionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetGasEstimateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.GetGasEstimateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetGasEstimateResponse.displayName = 'proto.tolar.proto.GetGasEstimateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetPastEventsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.GetPastEventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetPastEventsRequest.displayName = 'proto.tolar.proto.GetPastEventsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.PastEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.PastEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.PastEvent.displayName = 'proto.tolar.proto.PastEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.GetPastEventsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tolar.proto.GetPastEventsResponse.repeatedFields_, null);
};
goog.inherits(proto.tolar.proto.GetPastEventsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.GetPastEventsResponse.displayName = 'proto.tolar.proto.GetPastEventsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetBlockCountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetBlockCountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetBlockCountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetBlockCountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetBlockCountRequest}
 */
proto.tolar.proto.GetBlockCountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetBlockCountRequest;
  return proto.tolar.proto.GetBlockCountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetBlockCountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetBlockCountRequest}
 */
proto.tolar.proto.GetBlockCountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetBlockCountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetBlockCountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetBlockCountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetBlockCountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetBlockCountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetBlockCountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetBlockCountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetBlockCountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockCount: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetBlockCountResponse}
 */
proto.tolar.proto.GetBlockCountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetBlockCountResponse;
  return proto.tolar.proto.GetBlockCountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetBlockCountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetBlockCountResponse}
 */
proto.tolar.proto.GetBlockCountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetBlockCountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetBlockCountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetBlockCountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetBlockCountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockCount();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 block_count = 1;
 * @return {number}
 */
proto.tolar.proto.GetBlockCountResponse.prototype.getBlockCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetBlockCountResponse} returns this
 */
proto.tolar.proto.GetBlockCountResponse.prototype.setBlockCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetLatestBlockRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetLatestBlockRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetLatestBlockRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetLatestBlockRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetLatestBlockRequest}
 */
proto.tolar.proto.GetLatestBlockRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetLatestBlockRequest;
  return proto.tolar.proto.GetLatestBlockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetLatestBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetLatestBlockRequest}
 */
proto.tolar.proto.GetLatestBlockRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetLatestBlockRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetLatestBlockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetLatestBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetLatestBlockRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetBlockByHashRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetBlockByHashRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetBlockByHashRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetBlockByHashRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHash: msg.getBlockHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetBlockByHashRequest}
 */
proto.tolar.proto.GetBlockByHashRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetBlockByHashRequest;
  return proto.tolar.proto.GetBlockByHashRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetBlockByHashRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetBlockByHashRequest}
 */
proto.tolar.proto.GetBlockByHashRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetBlockByHashRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetBlockByHashRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetBlockByHashRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetBlockByHashRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes block_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetBlockByHashRequest.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes block_hash = 1;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.tolar.proto.GetBlockByHashRequest.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetBlockByHashRequest.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetBlockByHashRequest} returns this
 */
proto.tolar.proto.GetBlockByHashRequest.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetBlockByIndexRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetBlockByIndexRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetBlockByIndexRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetBlockByIndexRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockIndex: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetBlockByIndexRequest}
 */
proto.tolar.proto.GetBlockByIndexRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetBlockByIndexRequest;
  return proto.tolar.proto.GetBlockByIndexRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetBlockByIndexRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetBlockByIndexRequest}
 */
proto.tolar.proto.GetBlockByIndexRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetBlockByIndexRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetBlockByIndexRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetBlockByIndexRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetBlockByIndexRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockIndex();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 block_index = 1;
 * @return {number}
 */
proto.tolar.proto.GetBlockByIndexRequest.prototype.getBlockIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetBlockByIndexRequest} returns this
 */
proto.tolar.proto.GetBlockByIndexRequest.prototype.setBlockIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tolar.proto.GetBlockResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetBlockResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetBlockResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetBlockResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetBlockResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hash: msg.getHash_asB64(),
    previousBlockHash: msg.getPreviousBlockHash_asB64(),
    transactionHashesList: msg.getTransactionHashesList_asB64(),
    confirmationTimestamp: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetBlockResponse}
 */
proto.tolar.proto.GetBlockResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetBlockResponse;
  return proto.tolar.proto.GetBlockResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetBlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetBlockResponse}
 */
proto.tolar.proto.GetBlockResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockIndex(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPreviousBlockHash(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTransactionHashes(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfirmationTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetBlockResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetBlockResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetBlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetBlockResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockIndex();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPreviousBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTransactionHashesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      4,
      f
    );
  }
  f = message.getConfirmationTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint64 block_index = 1;
 * @return {number}
 */
proto.tolar.proto.GetBlockResponse.prototype.getBlockIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetBlockResponse} returns this
 */
proto.tolar.proto.GetBlockResponse.prototype.setBlockIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetBlockResponse.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.tolar.proto.GetBlockResponse.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetBlockResponse.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetBlockResponse} returns this
 */
proto.tolar.proto.GetBlockResponse.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes previous_block_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetBlockResponse.prototype.getPreviousBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes previous_block_hash = 3;
 * This is a type-conversion wrapper around `getPreviousBlockHash()`
 * @return {string}
 */
proto.tolar.proto.GetBlockResponse.prototype.getPreviousBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPreviousBlockHash()));
};


/**
 * optional bytes previous_block_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousBlockHash()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetBlockResponse.prototype.getPreviousBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPreviousBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetBlockResponse} returns this
 */
proto.tolar.proto.GetBlockResponse.prototype.setPreviousBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated bytes transaction_hashes = 4;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.tolar.proto.GetBlockResponse.prototype.getTransactionHashesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * repeated bytes transaction_hashes = 4;
 * This is a type-conversion wrapper around `getTransactionHashesList()`
 * @return {!Array<string>}
 */
proto.tolar.proto.GetBlockResponse.prototype.getTransactionHashesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTransactionHashesList()));
};


/**
 * repeated bytes transaction_hashes = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionHashesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.tolar.proto.GetBlockResponse.prototype.getTransactionHashesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTransactionHashesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.tolar.proto.GetBlockResponse} returns this
 */
proto.tolar.proto.GetBlockResponse.prototype.setTransactionHashesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.tolar.proto.GetBlockResponse} returns this
 */
proto.tolar.proto.GetBlockResponse.prototype.addTransactionHashes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tolar.proto.GetBlockResponse} returns this
 */
proto.tolar.proto.GetBlockResponse.prototype.clearTransactionHashesList = function() {
  return this.setTransactionHashesList([]);
};


/**
 * optional uint64 confirmation_timestamp = 5;
 * @return {number}
 */
proto.tolar.proto.GetBlockResponse.prototype.getConfirmationTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetBlockResponse} returns this
 */
proto.tolar.proto.GetBlockResponse.prototype.setConfirmationTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetPaginatedBlocksByIndexRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetPaginatedBlocksByIndexRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetPaginatedBlocksByIndexRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    startingBlockIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    numberOfBlocks: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetPaginatedBlocksByIndexRequest}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetPaginatedBlocksByIndexRequest;
  return proto.tolar.proto.GetPaginatedBlocksByIndexRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetPaginatedBlocksByIndexRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetPaginatedBlocksByIndexRequest}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartingBlockIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumberOfBlocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetPaginatedBlocksByIndexRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetPaginatedBlocksByIndexRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetPaginatedBlocksByIndexRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartingBlockIndex();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNumberOfBlocks();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 starting_block_index = 1;
 * @return {number}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexRequest.prototype.getStartingBlockIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetPaginatedBlocksByIndexRequest} returns this
 */
proto.tolar.proto.GetPaginatedBlocksByIndexRequest.prototype.setStartingBlockIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 number_of_blocks = 2;
 * @return {number}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexRequest.prototype.getNumberOfBlocks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetPaginatedBlocksByIndexRequest} returns this
 */
proto.tolar.proto.GetPaginatedBlocksByIndexRequest.prototype.setNumberOfBlocks = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetPaginatedBlocksByIndexResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetPaginatedBlocksByIndexResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHash: msg.getBlockHash_asB64(),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roundReceived: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    previousBlockHash: msg.getPreviousBlockHash_asB64(),
    stateRootHash: msg.getStateRootHash_asB64(),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    tolar_proto_transaction_pb.SignedTransaction.toObject, includeInstance),
    eventsProofHash: msg.getEventsProofHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetPaginatedBlocksByIndexResponse}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetPaginatedBlocksByIndexResponse;
  return proto.tolar.proto.GetPaginatedBlocksByIndexResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetPaginatedBlocksByIndexResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetPaginatedBlocksByIndexResponse}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRoundReceived(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPreviousBlockHash(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStateRootHash(value);
      break;
    case 7:
      var value = new tolar_proto_transaction_pb.SignedTransaction;
      reader.readMessage(value,tolar_proto_transaction_pb.SignedTransaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEventsProofHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetPaginatedBlocksByIndexResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetPaginatedBlocksByIndexResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRoundReceived();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getPreviousBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getStateRootHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      tolar_proto_transaction_pb.SignedTransaction.serializeBinaryToWriter
    );
  }
  f = message.getEventsProofHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional bytes block_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes block_hash = 1;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetPaginatedBlocksByIndexResponse} returns this
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 index = 2;
 * @return {number}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetPaginatedBlocksByIndexResponse} returns this
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 round_received = 3;
 * @return {number}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.getRoundReceived = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetPaginatedBlocksByIndexResponse} returns this
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.setRoundReceived = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 timestamp = 4;
 * @return {number}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetPaginatedBlocksByIndexResponse} returns this
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes previous_block_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.getPreviousBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes previous_block_hash = 5;
 * This is a type-conversion wrapper around `getPreviousBlockHash()`
 * @return {string}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.getPreviousBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPreviousBlockHash()));
};


/**
 * optional bytes previous_block_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousBlockHash()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.getPreviousBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPreviousBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetPaginatedBlocksByIndexResponse} returns this
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.setPreviousBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes state_root_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.getStateRootHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes state_root_hash = 6;
 * This is a type-conversion wrapper around `getStateRootHash()`
 * @return {string}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.getStateRootHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStateRootHash()));
};


/**
 * optional bytes state_root_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStateRootHash()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.getStateRootHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStateRootHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetPaginatedBlocksByIndexResponse} returns this
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.setStateRootHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * repeated tx.SignedTransaction transactions = 7;
 * @return {!Array<!proto.tolar.proto.tx.SignedTransaction>}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.tolar.proto.tx.SignedTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, tolar_proto_transaction_pb.SignedTransaction, 7));
};


/**
 * @param {!Array<!proto.tolar.proto.tx.SignedTransaction>} value
 * @return {!proto.tolar.proto.GetPaginatedBlocksByIndexResponse} returns this
*/
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.setTransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.tolar.proto.tx.SignedTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tolar.proto.tx.SignedTransaction}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.tolar.proto.tx.SignedTransaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tolar.proto.GetPaginatedBlocksByIndexResponse} returns this
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.clearTransactionsList = function() {
  return this.setTransactionsList([]);
};


/**
 * optional bytes events_proof_hash = 8;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.getEventsProofHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes events_proof_hash = 8;
 * This is a type-conversion wrapper around `getEventsProofHash()`
 * @return {string}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.getEventsProofHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEventsProofHash()));
};


/**
 * optional bytes events_proof_hash = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEventsProofHash()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.getEventsProofHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEventsProofHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetPaginatedBlocksByIndexResponse} returns this
 */
proto.tolar.proto.GetPaginatedBlocksByIndexResponse.prototype.setEventsProofHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetCompleteBlockByIndexResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetCompleteBlockByIndexResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetCompleteBlockByIndexResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetCompleteBlockByIndexResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    block: (f = msg.getBlock()) && tolar_proto_storage_pb.Block.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetCompleteBlockByIndexResponse}
 */
proto.tolar.proto.GetCompleteBlockByIndexResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetCompleteBlockByIndexResponse;
  return proto.tolar.proto.GetCompleteBlockByIndexResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetCompleteBlockByIndexResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetCompleteBlockByIndexResponse}
 */
proto.tolar.proto.GetCompleteBlockByIndexResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new tolar_proto_storage_pb.Block;
      reader.readMessage(value,tolar_proto_storage_pb.Block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetCompleteBlockByIndexResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetCompleteBlockByIndexResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetCompleteBlockByIndexResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetCompleteBlockByIndexResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      tolar_proto_storage_pb.Block.serializeBinaryToWriter
    );
  }
};


/**
 * optional storage.Block block = 1;
 * @return {?proto.tolar.proto.storage.Block}
 */
proto.tolar.proto.GetCompleteBlockByIndexResponse.prototype.getBlock = function() {
  return /** @type{?proto.tolar.proto.storage.Block} */ (
    jspb.Message.getWrapperField(this, tolar_proto_storage_pb.Block, 1));
};


/**
 * @param {?proto.tolar.proto.storage.Block|undefined} value
 * @return {!proto.tolar.proto.GetCompleteBlockByIndexResponse} returns this
*/
proto.tolar.proto.GetCompleteBlockByIndexResponse.prototype.setBlock = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tolar.proto.GetCompleteBlockByIndexResponse} returns this
 */
proto.tolar.proto.GetCompleteBlockByIndexResponse.prototype.clearBlock = function() {
  return this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tolar.proto.GetCompleteBlockByIndexResponse.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionHash: msg.getTransactionHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetTransactionRequest}
 */
proto.tolar.proto.GetTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetTransactionRequest;
  return proto.tolar.proto.GetTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetTransactionRequest}
 */
proto.tolar.proto.GetTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes transaction_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetTransactionRequest.prototype.getTransactionHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes transaction_hash = 1;
 * This is a type-conversion wrapper around `getTransactionHash()`
 * @return {string}
 */
proto.tolar.proto.GetTransactionRequest.prototype.getTransactionHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionHash()));
};


/**
 * optional bytes transaction_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionHash()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionRequest.prototype.getTransactionHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetTransactionRequest} returns this
 */
proto.tolar.proto.GetTransactionRequest.prototype.setTransactionHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetTransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetTransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetTransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetTransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionHash: msg.getTransactionHash_asB64(),
    blockHash: msg.getBlockHash_asB64(),
    transactionIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    senderAddress: msg.getSenderAddress_asB64(),
    receiverAddress: msg.getReceiverAddress_asB64(),
    value: msg.getValue_asB64(),
    gas: msg.getGas_asB64(),
    gasPrice: msg.getGasPrice_asB64(),
    data: msg.getData_asB64(),
    nonce: msg.getNonce_asB64(),
    confirmationTimestamp: jspb.Message.getFieldWithDefault(msg, 11, 0),
    gasUsed: msg.getGasUsed_asB64(),
    gasRefunded: msg.getGasRefunded_asB64(),
    newAddress: msg.getNewAddress_asB64(),
    output: msg.getOutput_asB64(),
    excepted: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    exception: jspb.Message.getFieldWithDefault(msg, 17, 0),
    networkId: jspb.Message.getFieldWithDefault(msg, 18, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetTransactionResponse}
 */
proto.tolar.proto.GetTransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetTransactionResponse;
  return proto.tolar.proto.GetTransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetTransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetTransactionResponse}
 */
proto.tolar.proto.GetTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransactionIndex(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSenderAddress(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReceiverAddress(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGas(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasPrice(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfirmationTimestamp(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasUsed(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasRefunded(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNewAddress(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOutput(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExcepted(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setException(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNetworkId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetTransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetTransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetTransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTransactionIndex();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSenderAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getReceiverAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getGas_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getGasPrice_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getConfirmationTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getGasUsed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getGasRefunded_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getNewAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getOutput_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      15,
      f
    );
  }
  f = message.getExcepted();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getException();
  if (f !== 0) {
    writer.writeUint32(
      17,
      f
    );
  }
  f = message.getNetworkId();
  if (f !== 0) {
    writer.writeUint64(
      18,
      f
    );
  }
};


/**
 * optional bytes transaction_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getTransactionHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes transaction_hash = 1;
 * This is a type-conversion wrapper around `getTransactionHash()`
 * @return {string}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getTransactionHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionHash()));
};


/**
 * optional bytes transaction_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionHash()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getTransactionHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetTransactionResponse} returns this
 */
proto.tolar.proto.GetTransactionResponse.prototype.setTransactionHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes block_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes block_hash = 2;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetTransactionResponse} returns this
 */
proto.tolar.proto.GetTransactionResponse.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 transaction_index = 3;
 * @return {number}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getTransactionIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetTransactionResponse} returns this
 */
proto.tolar.proto.GetTransactionResponse.prototype.setTransactionIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes sender_address = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getSenderAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes sender_address = 4;
 * This is a type-conversion wrapper around `getSenderAddress()`
 * @return {string}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getSenderAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSenderAddress()));
};


/**
 * optional bytes sender_address = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderAddress()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getSenderAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSenderAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetTransactionResponse} returns this
 */
proto.tolar.proto.GetTransactionResponse.prototype.setSenderAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes receiver_address = 5;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getReceiverAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes receiver_address = 5;
 * This is a type-conversion wrapper around `getReceiverAddress()`
 * @return {string}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getReceiverAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReceiverAddress()));
};


/**
 * optional bytes receiver_address = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReceiverAddress()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getReceiverAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReceiverAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetTransactionResponse} returns this
 */
proto.tolar.proto.GetTransactionResponse.prototype.setReceiverAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes value = 6;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes value = 6;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetTransactionResponse} returns this
 */
proto.tolar.proto.GetTransactionResponse.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes gas = 7;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getGas = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes gas = 7;
 * This is a type-conversion wrapper around `getGas()`
 * @return {string}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getGas_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGas()));
};


/**
 * optional bytes gas = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGas()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getGas_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGas()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetTransactionResponse} returns this
 */
proto.tolar.proto.GetTransactionResponse.prototype.setGas = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes gas_price = 8;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getGasPrice = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes gas_price = 8;
 * This is a type-conversion wrapper around `getGasPrice()`
 * @return {string}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getGasPrice_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasPrice()));
};


/**
 * optional bytes gas_price = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasPrice()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getGasPrice_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasPrice()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetTransactionResponse} returns this
 */
proto.tolar.proto.GetTransactionResponse.prototype.setGasPrice = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes data = 9;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes data = 9;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetTransactionResponse} returns this
 */
proto.tolar.proto.GetTransactionResponse.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes nonce = 10;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes nonce = 10;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetTransactionResponse} returns this
 */
proto.tolar.proto.GetTransactionResponse.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional uint64 confirmation_timestamp = 11;
 * @return {number}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getConfirmationTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetTransactionResponse} returns this
 */
proto.tolar.proto.GetTransactionResponse.prototype.setConfirmationTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional bytes gas_used = 12;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getGasUsed = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes gas_used = 12;
 * This is a type-conversion wrapper around `getGasUsed()`
 * @return {string}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getGasUsed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasUsed()));
};


/**
 * optional bytes gas_used = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasUsed()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getGasUsed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasUsed()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetTransactionResponse} returns this
 */
proto.tolar.proto.GetTransactionResponse.prototype.setGasUsed = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * optional bytes gas_refunded = 13;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getGasRefunded = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes gas_refunded = 13;
 * This is a type-conversion wrapper around `getGasRefunded()`
 * @return {string}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getGasRefunded_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasRefunded()));
};


/**
 * optional bytes gas_refunded = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasRefunded()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getGasRefunded_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasRefunded()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetTransactionResponse} returns this
 */
proto.tolar.proto.GetTransactionResponse.prototype.setGasRefunded = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional bytes new_address = 14;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getNewAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes new_address = 14;
 * This is a type-conversion wrapper around `getNewAddress()`
 * @return {string}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getNewAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNewAddress()));
};


/**
 * optional bytes new_address = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNewAddress()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getNewAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNewAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetTransactionResponse} returns this
 */
proto.tolar.proto.GetTransactionResponse.prototype.setNewAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 14, value);
};


/**
 * optional bytes output = 15;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getOutput = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes output = 15;
 * This is a type-conversion wrapper around `getOutput()`
 * @return {string}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getOutput_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOutput()));
};


/**
 * optional bytes output = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOutput()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getOutput_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOutput()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetTransactionResponse} returns this
 */
proto.tolar.proto.GetTransactionResponse.prototype.setOutput = function(value) {
  return jspb.Message.setProto3BytesField(this, 15, value);
};


/**
 * optional bool excepted = 16;
 * @return {boolean}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getExcepted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tolar.proto.GetTransactionResponse} returns this
 */
proto.tolar.proto.GetTransactionResponse.prototype.setExcepted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * optional uint32 exception = 17;
 * @return {number}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getException = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetTransactionResponse} returns this
 */
proto.tolar.proto.GetTransactionResponse.prototype.setException = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional uint64 network_id = 18;
 * @return {number}
 */
proto.tolar.proto.GetTransactionResponse.prototype.getNetworkId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetTransactionResponse} returns this
 */
proto.tolar.proto.GetTransactionResponse.prototype.setNetworkId = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetBlockchainInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetBlockchainInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetBlockchainInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetBlockchainInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetBlockchainInfoRequest}
 */
proto.tolar.proto.GetBlockchainInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetBlockchainInfoRequest;
  return proto.tolar.proto.GetBlockchainInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetBlockchainInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetBlockchainInfoRequest}
 */
proto.tolar.proto.GetBlockchainInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetBlockchainInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetBlockchainInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetBlockchainInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetBlockchainInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetBlockchainInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetBlockchainInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetBlockchainInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetBlockchainInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    confirmedBlocksCount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalBlocksCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    lastConfirmedBlockHash: msg.getLastConfirmedBlockHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetBlockchainInfoResponse}
 */
proto.tolar.proto.GetBlockchainInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetBlockchainInfoResponse;
  return proto.tolar.proto.GetBlockchainInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetBlockchainInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetBlockchainInfoResponse}
 */
proto.tolar.proto.GetBlockchainInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfirmedBlocksCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalBlocksCount(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLastConfirmedBlockHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetBlockchainInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetBlockchainInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetBlockchainInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetBlockchainInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfirmedBlocksCount();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTotalBlocksCount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getLastConfirmedBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional uint64 confirmed_blocks_count = 1;
 * @return {number}
 */
proto.tolar.proto.GetBlockchainInfoResponse.prototype.getConfirmedBlocksCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetBlockchainInfoResponse} returns this
 */
proto.tolar.proto.GetBlockchainInfoResponse.prototype.setConfirmedBlocksCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 total_blocks_count = 2;
 * @return {number}
 */
proto.tolar.proto.GetBlockchainInfoResponse.prototype.getTotalBlocksCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetBlockchainInfoResponse} returns this
 */
proto.tolar.proto.GetBlockchainInfoResponse.prototype.setTotalBlocksCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes last_confirmed_block_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetBlockchainInfoResponse.prototype.getLastConfirmedBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes last_confirmed_block_hash = 3;
 * This is a type-conversion wrapper around `getLastConfirmedBlockHash()`
 * @return {string}
 */
proto.tolar.proto.GetBlockchainInfoResponse.prototype.getLastConfirmedBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLastConfirmedBlockHash()));
};


/**
 * optional bytes last_confirmed_block_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastConfirmedBlockHash()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetBlockchainInfoResponse.prototype.getLastConfirmedBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLastConfirmedBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetBlockchainInfoResponse} returns this
 */
proto.tolar.proto.GetBlockchainInfoResponse.prototype.setLastConfirmedBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetTransactionReceiptRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetTransactionReceiptRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetTransactionReceiptRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetTransactionReceiptRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionHash: msg.getTransactionHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetTransactionReceiptRequest}
 */
proto.tolar.proto.GetTransactionReceiptRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetTransactionReceiptRequest;
  return proto.tolar.proto.GetTransactionReceiptRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetTransactionReceiptRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetTransactionReceiptRequest}
 */
proto.tolar.proto.GetTransactionReceiptRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionReceiptRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetTransactionReceiptRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetTransactionReceiptRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetTransactionReceiptRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes transaction_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetTransactionReceiptRequest.prototype.getTransactionHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes transaction_hash = 1;
 * This is a type-conversion wrapper around `getTransactionHash()`
 * @return {string}
 */
proto.tolar.proto.GetTransactionReceiptRequest.prototype.getTransactionHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionHash()));
};


/**
 * optional bytes transaction_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionHash()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionReceiptRequest.prototype.getTransactionHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetTransactionReceiptRequest} returns this
 */
proto.tolar.proto.GetTransactionReceiptRequest.prototype.setTransactionHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tolar.proto.GetTransactionReceiptResponse.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetTransactionReceiptResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetTransactionReceiptResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetTransactionReceiptResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    excepted: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    blockHash: msg.getBlockHash_asB64(),
    blockIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    transactionHash: msg.getTransactionHash_asB64(),
    transactionIndex: jspb.Message.getFieldWithDefault(msg, 5, 0),
    senderAddress: msg.getSenderAddress_asB64(),
    receiverAddress: msg.getReceiverAddress_asB64(),
    newAddress: msg.getNewAddress_asB64(),
    gasUsed: msg.getGasUsed_asB64(),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    tolar_proto_transaction_pb.LogEntry.toObject, includeInstance),
    exception: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetTransactionReceiptResponse}
 */
proto.tolar.proto.GetTransactionReceiptResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetTransactionReceiptResponse;
  return proto.tolar.proto.GetTransactionReceiptResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetTransactionReceiptResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetTransactionReceiptResponse}
 */
proto.tolar.proto.GetTransactionReceiptResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExcepted(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockIndex(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionHash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransactionIndex(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSenderAddress(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReceiverAddress(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNewAddress(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasUsed(value);
      break;
    case 10:
      var value = new tolar_proto_transaction_pb.LogEntry;
      reader.readMessage(value,tolar_proto_transaction_pb.LogEntry.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setException(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetTransactionReceiptResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetTransactionReceiptResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetTransactionReceiptResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExcepted();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getBlockIndex();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTransactionHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getTransactionIndex();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSenderAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getReceiverAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getNewAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getGasUsed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      tolar_proto_transaction_pb.LogEntry.serializeBinaryToWriter
    );
  }
  f = message.getException();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
};


/**
 * optional bool excepted = 1;
 * @return {boolean}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getExcepted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tolar.proto.GetTransactionReceiptResponse} returns this
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.setExcepted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bytes block_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes block_hash = 2;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetTransactionReceiptResponse} returns this
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 block_index = 3;
 * @return {number}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getBlockIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetTransactionReceiptResponse} returns this
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.setBlockIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes transaction_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getTransactionHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes transaction_hash = 4;
 * This is a type-conversion wrapper around `getTransactionHash()`
 * @return {string}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getTransactionHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionHash()));
};


/**
 * optional bytes transaction_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionHash()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getTransactionHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetTransactionReceiptResponse} returns this
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.setTransactionHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional uint64 transaction_index = 5;
 * @return {number}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getTransactionIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetTransactionReceiptResponse} returns this
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.setTransactionIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes sender_address = 6;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getSenderAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes sender_address = 6;
 * This is a type-conversion wrapper around `getSenderAddress()`
 * @return {string}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getSenderAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSenderAddress()));
};


/**
 * optional bytes sender_address = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderAddress()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getSenderAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSenderAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetTransactionReceiptResponse} returns this
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.setSenderAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes receiver_address = 7;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getReceiverAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes receiver_address = 7;
 * This is a type-conversion wrapper around `getReceiverAddress()`
 * @return {string}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getReceiverAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReceiverAddress()));
};


/**
 * optional bytes receiver_address = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReceiverAddress()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getReceiverAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReceiverAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetTransactionReceiptResponse} returns this
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.setReceiverAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes new_address = 8;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getNewAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes new_address = 8;
 * This is a type-conversion wrapper around `getNewAddress()`
 * @return {string}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getNewAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNewAddress()));
};


/**
 * optional bytes new_address = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNewAddress()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getNewAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNewAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetTransactionReceiptResponse} returns this
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.setNewAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes gas_used = 9;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getGasUsed = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes gas_used = 9;
 * This is a type-conversion wrapper around `getGasUsed()`
 * @return {string}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getGasUsed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasUsed()));
};


/**
 * optional bytes gas_used = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasUsed()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getGasUsed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasUsed()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetTransactionReceiptResponse} returns this
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.setGasUsed = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * repeated tx.LogEntry logs = 10;
 * @return {!Array<!proto.tolar.proto.tx.LogEntry>}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.tolar.proto.tx.LogEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, tolar_proto_transaction_pb.LogEntry, 10));
};


/**
 * @param {!Array<!proto.tolar.proto.tx.LogEntry>} value
 * @return {!proto.tolar.proto.GetTransactionReceiptResponse} returns this
*/
proto.tolar.proto.GetTransactionReceiptResponse.prototype.setLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.tolar.proto.tx.LogEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tolar.proto.tx.LogEntry}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.tolar.proto.tx.LogEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tolar.proto.GetTransactionReceiptResponse} returns this
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.clearLogsList = function() {
  return this.setLogsList([]);
};


/**
 * optional uint32 exception = 11;
 * @return {number}
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.getException = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetTransactionReceiptResponse} returns this
 */
proto.tolar.proto.GetTransactionReceiptResponse.prototype.setException = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tolar.proto.GetTransactionListRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetTransactionListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetTransactionListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetTransactionListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetTransactionListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressesList: msg.getAddressesList_asB64(),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    skip: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetTransactionListRequest}
 */
proto.tolar.proto.GetTransactionListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetTransactionListRequest;
  return proto.tolar.proto.GetTransactionListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetTransactionListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetTransactionListRequest}
 */
proto.tolar.proto.GetTransactionListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addAddresses(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSkip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetTransactionListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetTransactionListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetTransactionListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSkip();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * repeated bytes addresses = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.tolar.proto.GetTransactionListRequest.prototype.getAddressesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes addresses = 1;
 * This is a type-conversion wrapper around `getAddressesList()`
 * @return {!Array<string>}
 */
proto.tolar.proto.GetTransactionListRequest.prototype.getAddressesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getAddressesList()));
};


/**
 * repeated bytes addresses = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddressesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.tolar.proto.GetTransactionListRequest.prototype.getAddressesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getAddressesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.tolar.proto.GetTransactionListRequest} returns this
 */
proto.tolar.proto.GetTransactionListRequest.prototype.setAddressesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.tolar.proto.GetTransactionListRequest} returns this
 */
proto.tolar.proto.GetTransactionListRequest.prototype.addAddresses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tolar.proto.GetTransactionListRequest} returns this
 */
proto.tolar.proto.GetTransactionListRequest.prototype.clearAddressesList = function() {
  return this.setAddressesList([]);
};


/**
 * optional uint64 limit = 2;
 * @return {number}
 */
proto.tolar.proto.GetTransactionListRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetTransactionListRequest} returns this
 */
proto.tolar.proto.GetTransactionListRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 skip = 3;
 * @return {number}
 */
proto.tolar.proto.GetTransactionListRequest.prototype.getSkip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetTransactionListRequest} returns this
 */
proto.tolar.proto.GetTransactionListRequest.prototype.setSkip = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tolar.proto.GetTransactionListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetTransactionListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetTransactionListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetTransactionListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetTransactionListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.tolar.proto.GetTransactionResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetTransactionListResponse}
 */
proto.tolar.proto.GetTransactionListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetTransactionListResponse;
  return proto.tolar.proto.GetTransactionListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetTransactionListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetTransactionListResponse}
 */
proto.tolar.proto.GetTransactionListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tolar.proto.GetTransactionResponse;
      reader.readMessage(value,proto.tolar.proto.GetTransactionResponse.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetTransactionListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetTransactionListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetTransactionListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetTransactionListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tolar.proto.GetTransactionResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GetTransactionResponse transactions = 1;
 * @return {!Array<!proto.tolar.proto.GetTransactionResponse>}
 */
proto.tolar.proto.GetTransactionListResponse.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.tolar.proto.GetTransactionResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tolar.proto.GetTransactionResponse, 1));
};


/**
 * @param {!Array<!proto.tolar.proto.GetTransactionResponse>} value
 * @return {!proto.tolar.proto.GetTransactionListResponse} returns this
*/
proto.tolar.proto.GetTransactionListResponse.prototype.setTransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tolar.proto.GetTransactionResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tolar.proto.GetTransactionResponse}
 */
proto.tolar.proto.GetTransactionListResponse.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tolar.proto.GetTransactionResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tolar.proto.GetTransactionListResponse} returns this
 */
proto.tolar.proto.GetTransactionListResponse.prototype.clearTransactionsList = function() {
  return this.setTransactionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetBalanceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetBalanceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetBalanceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetBalanceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    blockIndex: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetBalanceRequest}
 */
proto.tolar.proto.GetBalanceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetBalanceRequest;
  return proto.tolar.proto.GetBalanceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetBalanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetBalanceRequest}
 */
proto.tolar.proto.GetBalanceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetBalanceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetBalanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetBalanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetBalanceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBlockIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetBalanceRequest.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.tolar.proto.GetBalanceRequest.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetBalanceRequest.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetBalanceRequest} returns this
 */
proto.tolar.proto.GetBalanceRequest.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 block_index = 2;
 * @return {number}
 */
proto.tolar.proto.GetBalanceRequest.prototype.getBlockIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetBalanceRequest} returns this
 */
proto.tolar.proto.GetBalanceRequest.prototype.setBlockIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetBalanceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetBalanceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetBalanceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetBalanceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    balance: msg.getBalance_asB64(),
    blockIndex: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetBalanceResponse}
 */
proto.tolar.proto.GetBalanceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetBalanceResponse;
  return proto.tolar.proto.GetBalanceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetBalanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetBalanceResponse}
 */
proto.tolar.proto.GetBalanceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBalance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetBalanceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetBalanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetBalanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetBalanceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBalance_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBlockIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional bytes balance = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetBalanceResponse.prototype.getBalance = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes balance = 1;
 * This is a type-conversion wrapper around `getBalance()`
 * @return {string}
 */
proto.tolar.proto.GetBalanceResponse.prototype.getBalance_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBalance()));
};


/**
 * optional bytes balance = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBalance()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetBalanceResponse.prototype.getBalance_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBalance()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetBalanceResponse} returns this
 */
proto.tolar.proto.GetBalanceResponse.prototype.setBalance = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 block_index = 2;
 * @return {number}
 */
proto.tolar.proto.GetBalanceResponse.prototype.getBlockIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetBalanceResponse} returns this
 */
proto.tolar.proto.GetBalanceResponse.prototype.setBlockIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetNonceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetNonceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetNonceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetNonceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetNonceRequest}
 */
proto.tolar.proto.GetNonceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetNonceRequest;
  return proto.tolar.proto.GetNonceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetNonceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetNonceRequest}
 */
proto.tolar.proto.GetNonceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetNonceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetNonceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetNonceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetNonceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetNonceRequest.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.tolar.proto.GetNonceRequest.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetNonceRequest.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetNonceRequest} returns this
 */
proto.tolar.proto.GetNonceRequest.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetNonceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetNonceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetNonceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetNonceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: msg.getNonce_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetNonceResponse}
 */
proto.tolar.proto.GetNonceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetNonceResponse;
  return proto.tolar.proto.GetNonceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetNonceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetNonceResponse}
 */
proto.tolar.proto.GetNonceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetNonceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetNonceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetNonceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetNonceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes nonce = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetNonceResponse.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes nonce = 1;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.tolar.proto.GetNonceResponse.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetNonceResponse.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetNonceResponse} returns this
 */
proto.tolar.proto.GetNonceResponse.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.TryCallTransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.TryCallTransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.TryCallTransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.TryCallTransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    output: msg.getOutput_asB64(),
    excepted: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    exception: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.TryCallTransactionResponse}
 */
proto.tolar.proto.TryCallTransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.TryCallTransactionResponse;
  return proto.tolar.proto.TryCallTransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.TryCallTransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.TryCallTransactionResponse}
 */
proto.tolar.proto.TryCallTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOutput(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExcepted(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setException(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.TryCallTransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.TryCallTransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.TryCallTransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.TryCallTransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutput_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getExcepted();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getException();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional bytes output = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.TryCallTransactionResponse.prototype.getOutput = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes output = 1;
 * This is a type-conversion wrapper around `getOutput()`
 * @return {string}
 */
proto.tolar.proto.TryCallTransactionResponse.prototype.getOutput_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOutput()));
};


/**
 * optional bytes output = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOutput()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.TryCallTransactionResponse.prototype.getOutput_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOutput()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.TryCallTransactionResponse} returns this
 */
proto.tolar.proto.TryCallTransactionResponse.prototype.setOutput = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool excepted = 2;
 * @return {boolean}
 */
proto.tolar.proto.TryCallTransactionResponse.prototype.getExcepted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tolar.proto.TryCallTransactionResponse} returns this
 */
proto.tolar.proto.TryCallTransactionResponse.prototype.setExcepted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint32 exception = 3;
 * @return {number}
 */
proto.tolar.proto.TryCallTransactionResponse.prototype.getException = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.TryCallTransactionResponse} returns this
 */
proto.tolar.proto.TryCallTransactionResponse.prototype.setException = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetGasEstimateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetGasEstimateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetGasEstimateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetGasEstimateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gasEstimate: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetGasEstimateResponse}
 */
proto.tolar.proto.GetGasEstimateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetGasEstimateResponse;
  return proto.tolar.proto.GetGasEstimateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetGasEstimateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetGasEstimateResponse}
 */
proto.tolar.proto.GetGasEstimateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasEstimate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetGasEstimateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetGasEstimateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetGasEstimateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetGasEstimateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGasEstimate();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 gas_estimate = 1;
 * @return {number}
 */
proto.tolar.proto.GetGasEstimateResponse.prototype.getGasEstimate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.GetGasEstimateResponse} returns this
 */
proto.tolar.proto.GetGasEstimateResponse.prototype.setGasEstimate = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetPastEventsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetPastEventsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetPastEventsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetPastEventsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    topic: msg.getTopic_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetPastEventsRequest}
 */
proto.tolar.proto.GetPastEventsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetPastEventsRequest;
  return proto.tolar.proto.GetPastEventsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetPastEventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetPastEventsRequest}
 */
proto.tolar.proto.GetPastEventsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTopic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetPastEventsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetPastEventsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetPastEventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetPastEventsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTopic_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetPastEventsRequest.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.tolar.proto.GetPastEventsRequest.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetPastEventsRequest.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetPastEventsRequest} returns this
 */
proto.tolar.proto.GetPastEventsRequest.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes topic = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.GetPastEventsRequest.prototype.getTopic = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes topic = 2;
 * This is a type-conversion wrapper around `getTopic()`
 * @return {string}
 */
proto.tolar.proto.GetPastEventsRequest.prototype.getTopic_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTopic()));
};


/**
 * optional bytes topic = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopic()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetPastEventsRequest.prototype.getTopic_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTopic()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.GetPastEventsRequest} returns this
 */
proto.tolar.proto.GetPastEventsRequest.prototype.setTopic = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.PastEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.PastEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.PastEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.PastEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    topic: msg.getTopic_asB64(),
    topicArg0: msg.getTopicArg0_asB64(),
    topicArg1: msg.getTopicArg1_asB64(),
    topicArg2: msg.getTopicArg2_asB64(),
    data: msg.getData_asB64(),
    transactionHash: msg.getTransactionHash_asB64(),
    blockHash: msg.getBlockHash_asB64(),
    blockIndex: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.PastEvent}
 */
proto.tolar.proto.PastEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.PastEvent;
  return proto.tolar.proto.PastEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.PastEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.PastEvent}
 */
proto.tolar.proto.PastEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTopic(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTopicArg0(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTopicArg1(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTopicArg2(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionHash(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.PastEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.PastEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.PastEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.PastEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTopic_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTopicArg0_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTopicArg1_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getTopicArg2_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getTransactionHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getBlockIndex();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.PastEvent.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.tolar.proto.PastEvent.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.PastEvent.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.PastEvent} returns this
 */
proto.tolar.proto.PastEvent.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes topic = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.PastEvent.prototype.getTopic = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes topic = 2;
 * This is a type-conversion wrapper around `getTopic()`
 * @return {string}
 */
proto.tolar.proto.PastEvent.prototype.getTopic_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTopic()));
};


/**
 * optional bytes topic = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopic()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.PastEvent.prototype.getTopic_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTopic()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.PastEvent} returns this
 */
proto.tolar.proto.PastEvent.prototype.setTopic = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes topic_arg_0 = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.PastEvent.prototype.getTopicArg0 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes topic_arg_0 = 3;
 * This is a type-conversion wrapper around `getTopicArg0()`
 * @return {string}
 */
proto.tolar.proto.PastEvent.prototype.getTopicArg0_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTopicArg0()));
};


/**
 * optional bytes topic_arg_0 = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopicArg0()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.PastEvent.prototype.getTopicArg0_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTopicArg0()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.PastEvent} returns this
 */
proto.tolar.proto.PastEvent.prototype.setTopicArg0 = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes topic_arg_1 = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.PastEvent.prototype.getTopicArg1 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes topic_arg_1 = 4;
 * This is a type-conversion wrapper around `getTopicArg1()`
 * @return {string}
 */
proto.tolar.proto.PastEvent.prototype.getTopicArg1_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTopicArg1()));
};


/**
 * optional bytes topic_arg_1 = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopicArg1()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.PastEvent.prototype.getTopicArg1_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTopicArg1()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.PastEvent} returns this
 */
proto.tolar.proto.PastEvent.prototype.setTopicArg1 = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes topic_arg_2 = 5;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.PastEvent.prototype.getTopicArg2 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes topic_arg_2 = 5;
 * This is a type-conversion wrapper around `getTopicArg2()`
 * @return {string}
 */
proto.tolar.proto.PastEvent.prototype.getTopicArg2_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTopicArg2()));
};


/**
 * optional bytes topic_arg_2 = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopicArg2()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.PastEvent.prototype.getTopicArg2_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTopicArg2()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.PastEvent} returns this
 */
proto.tolar.proto.PastEvent.prototype.setTopicArg2 = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.PastEvent.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.tolar.proto.PastEvent.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.PastEvent.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.PastEvent} returns this
 */
proto.tolar.proto.PastEvent.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes transaction_hash = 7;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.PastEvent.prototype.getTransactionHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes transaction_hash = 7;
 * This is a type-conversion wrapper around `getTransactionHash()`
 * @return {string}
 */
proto.tolar.proto.PastEvent.prototype.getTransactionHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionHash()));
};


/**
 * optional bytes transaction_hash = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionHash()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.PastEvent.prototype.getTransactionHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.PastEvent} returns this
 */
proto.tolar.proto.PastEvent.prototype.setTransactionHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes block_hash = 8;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.PastEvent.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes block_hash = 8;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.tolar.proto.PastEvent.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.PastEvent.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.PastEvent} returns this
 */
proto.tolar.proto.PastEvent.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional uint64 block_index = 9;
 * @return {number}
 */
proto.tolar.proto.PastEvent.prototype.getBlockIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.PastEvent} returns this
 */
proto.tolar.proto.PastEvent.prototype.setBlockIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tolar.proto.GetPastEventsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.GetPastEventsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.GetPastEventsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.GetPastEventsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetPastEventsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pastEventsList: jspb.Message.toObjectList(msg.getPastEventsList(),
    proto.tolar.proto.PastEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.GetPastEventsResponse}
 */
proto.tolar.proto.GetPastEventsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.GetPastEventsResponse;
  return proto.tolar.proto.GetPastEventsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.GetPastEventsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.GetPastEventsResponse}
 */
proto.tolar.proto.GetPastEventsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tolar.proto.PastEvent;
      reader.readMessage(value,proto.tolar.proto.PastEvent.deserializeBinaryFromReader);
      msg.addPastEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.GetPastEventsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.GetPastEventsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.GetPastEventsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.GetPastEventsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPastEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tolar.proto.PastEvent.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PastEvent past_events = 1;
 * @return {!Array<!proto.tolar.proto.PastEvent>}
 */
proto.tolar.proto.GetPastEventsResponse.prototype.getPastEventsList = function() {
  return /** @type{!Array<!proto.tolar.proto.PastEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tolar.proto.PastEvent, 1));
};


/**
 * @param {!Array<!proto.tolar.proto.PastEvent>} value
 * @return {!proto.tolar.proto.GetPastEventsResponse} returns this
*/
proto.tolar.proto.GetPastEventsResponse.prototype.setPastEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tolar.proto.PastEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tolar.proto.PastEvent}
 */
proto.tolar.proto.GetPastEventsResponse.prototype.addPastEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tolar.proto.PastEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tolar.proto.GetPastEventsResponse} returns this
 */
proto.tolar.proto.GetPastEventsResponse.prototype.clearPastEventsList = function() {
  return this.setPastEventsList([]);
};


goog.object.extend(exports, proto.tolar.proto);
