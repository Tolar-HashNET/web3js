// source: tolar/proto/transaction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var tolar_proto_common_pb = require('../../tolar/proto/common_pb.js');
goog.object.extend(proto, tolar_proto_common_pb);
goog.exportSymbol('proto.tolar.proto.tx.ExecutedTransaction', null, global);
goog.exportSymbol('proto.tolar.proto.tx.LogEntry', null, global);
goog.exportSymbol('proto.tolar.proto.tx.SignedTransaction', null, global);
goog.exportSymbol('proto.tolar.proto.tx.Transaction', null, global);
goog.exportSymbol('proto.tolar.proto.tx.TxExecutionResult', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.tx.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.tx.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.tx.Transaction.displayName = 'proto.tolar.proto.tx.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.tx.SignedTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.tx.SignedTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.tx.SignedTransaction.displayName = 'proto.tolar.proto.tx.SignedTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.tx.TxExecutionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tolar.proto.tx.TxExecutionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.tx.TxExecutionResult.displayName = 'proto.tolar.proto.tx.TxExecutionResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.tx.LogEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tolar.proto.tx.LogEntry.repeatedFields_, null);
};
goog.inherits(proto.tolar.proto.tx.LogEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.tx.LogEntry.displayName = 'proto.tolar.proto.tx.LogEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tolar.proto.tx.ExecutedTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tolar.proto.tx.ExecutedTransaction.repeatedFields_, null);
};
goog.inherits(proto.tolar.proto.tx.ExecutedTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tolar.proto.tx.ExecutedTransaction.displayName = 'proto.tolar.proto.tx.ExecutedTransaction';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.tx.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.tx.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.tx.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.tx.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    senderAddress: msg.getSenderAddress_asB64(),
    receiverAddress: msg.getReceiverAddress_asB64(),
    value: msg.getValue_asB64(),
    gas: msg.getGas_asB64(),
    gasPrice: msg.getGasPrice_asB64(),
    data: msg.getData_asB64(),
    nonce: msg.getNonce_asB64(),
    networkId: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.tx.Transaction}
 */
proto.tolar.proto.tx.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.tx.Transaction;
  return proto.tolar.proto.tx.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.tx.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.tx.Transaction}
 */
proto.tolar.proto.tx.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSenderAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReceiverAddress(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGas(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasPrice(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNetworkId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.tx.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.tx.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.tx.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.tx.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getReceiverAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getGas_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getGasPrice_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getNetworkId();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional bytes sender_address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.tx.Transaction.prototype.getSenderAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes sender_address = 1;
 * This is a type-conversion wrapper around `getSenderAddress()`
 * @return {string}
 */
proto.tolar.proto.tx.Transaction.prototype.getSenderAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSenderAddress()));
};


/**
 * optional bytes sender_address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderAddress()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.tx.Transaction.prototype.getSenderAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSenderAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.tx.Transaction} returns this
 */
proto.tolar.proto.tx.Transaction.prototype.setSenderAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes receiver_address = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.tx.Transaction.prototype.getReceiverAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes receiver_address = 2;
 * This is a type-conversion wrapper around `getReceiverAddress()`
 * @return {string}
 */
proto.tolar.proto.tx.Transaction.prototype.getReceiverAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReceiverAddress()));
};


/**
 * optional bytes receiver_address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReceiverAddress()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.tx.Transaction.prototype.getReceiverAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReceiverAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.tx.Transaction} returns this
 */
proto.tolar.proto.tx.Transaction.prototype.setReceiverAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes value = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.tx.Transaction.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes value = 3;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.tolar.proto.tx.Transaction.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.tx.Transaction.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.tx.Transaction} returns this
 */
proto.tolar.proto.tx.Transaction.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes gas = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.tx.Transaction.prototype.getGas = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes gas = 4;
 * This is a type-conversion wrapper around `getGas()`
 * @return {string}
 */
proto.tolar.proto.tx.Transaction.prototype.getGas_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGas()));
};


/**
 * optional bytes gas = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGas()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.tx.Transaction.prototype.getGas_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGas()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.tx.Transaction} returns this
 */
proto.tolar.proto.tx.Transaction.prototype.setGas = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes gas_price = 5;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.tx.Transaction.prototype.getGasPrice = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes gas_price = 5;
 * This is a type-conversion wrapper around `getGasPrice()`
 * @return {string}
 */
proto.tolar.proto.tx.Transaction.prototype.getGasPrice_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasPrice()));
};


/**
 * optional bytes gas_price = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasPrice()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.tx.Transaction.prototype.getGasPrice_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasPrice()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.tx.Transaction} returns this
 */
proto.tolar.proto.tx.Transaction.prototype.setGasPrice = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.tx.Transaction.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.tolar.proto.tx.Transaction.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.tx.Transaction.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.tx.Transaction} returns this
 */
proto.tolar.proto.tx.Transaction.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes nonce = 7;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.tx.Transaction.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes nonce = 7;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.tolar.proto.tx.Transaction.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.tx.Transaction.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.tx.Transaction} returns this
 */
proto.tolar.proto.tx.Transaction.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional uint64 network_id = 8;
 * @return {number}
 */
proto.tolar.proto.tx.Transaction.prototype.getNetworkId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.tolar.proto.tx.Transaction} returns this
 */
proto.tolar.proto.tx.Transaction.prototype.setNetworkId = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.tx.SignedTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.tx.SignedTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.tx.SignedTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.tx.SignedTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: (f = msg.getBody()) && proto.tolar.proto.tx.Transaction.toObject(includeInstance, f),
    sigData: (f = msg.getSigData()) && tolar_proto_common_pb.SignatureData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.tx.SignedTransaction}
 */
proto.tolar.proto.tx.SignedTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.tx.SignedTransaction;
  return proto.tolar.proto.tx.SignedTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.tx.SignedTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.tx.SignedTransaction}
 */
proto.tolar.proto.tx.SignedTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tolar.proto.tx.Transaction;
      reader.readMessage(value,proto.tolar.proto.tx.Transaction.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 2:
      var value = new tolar_proto_common_pb.SignatureData;
      reader.readMessage(value,tolar_proto_common_pb.SignatureData.deserializeBinaryFromReader);
      msg.setSigData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.tx.SignedTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.tx.SignedTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.tx.SignedTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.tx.SignedTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tolar.proto.tx.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getSigData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      tolar_proto_common_pb.SignatureData.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transaction body = 1;
 * @return {?proto.tolar.proto.tx.Transaction}
 */
proto.tolar.proto.tx.SignedTransaction.prototype.getBody = function() {
  return /** @type{?proto.tolar.proto.tx.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.tolar.proto.tx.Transaction, 1));
};


/**
 * @param {?proto.tolar.proto.tx.Transaction|undefined} value
 * @return {!proto.tolar.proto.tx.SignedTransaction} returns this
*/
proto.tolar.proto.tx.SignedTransaction.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tolar.proto.tx.SignedTransaction} returns this
 */
proto.tolar.proto.tx.SignedTransaction.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tolar.proto.tx.SignedTransaction.prototype.hasBody = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional tolar.proto.SignatureData sig_data = 2;
 * @return {?proto.tolar.proto.SignatureData}
 */
proto.tolar.proto.tx.SignedTransaction.prototype.getSigData = function() {
  return /** @type{?proto.tolar.proto.SignatureData} */ (
    jspb.Message.getWrapperField(this, tolar_proto_common_pb.SignatureData, 2));
};


/**
 * @param {?proto.tolar.proto.SignatureData|undefined} value
 * @return {!proto.tolar.proto.tx.SignedTransaction} returns this
*/
proto.tolar.proto.tx.SignedTransaction.prototype.setSigData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tolar.proto.tx.SignedTransaction} returns this
 */
proto.tolar.proto.tx.SignedTransaction.prototype.clearSigData = function() {
  return this.setSigData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tolar.proto.tx.SignedTransaction.prototype.hasSigData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.tx.TxExecutionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.tx.TxExecutionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.tx.TxExecutionResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.tx.TxExecutionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    gasUsed: msg.getGasUsed_asB64(),
    gasRefunded: msg.getGasRefunded_asB64(),
    newAddress: msg.getNewAddress_asB64(),
    output: msg.getOutput_asB64(),
    excepted: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.tx.TxExecutionResult}
 */
proto.tolar.proto.tx.TxExecutionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.tx.TxExecutionResult;
  return proto.tolar.proto.tx.TxExecutionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.tx.TxExecutionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.tx.TxExecutionResult}
 */
proto.tolar.proto.tx.TxExecutionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasUsed(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasRefunded(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNewAddress(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOutput(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExcepted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.tx.TxExecutionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.tx.TxExecutionResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.tx.TxExecutionResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.tx.TxExecutionResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGasUsed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getGasRefunded_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getNewAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getOutput_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getExcepted();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bytes gas_used = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.tx.TxExecutionResult.prototype.getGasUsed = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes gas_used = 1;
 * This is a type-conversion wrapper around `getGasUsed()`
 * @return {string}
 */
proto.tolar.proto.tx.TxExecutionResult.prototype.getGasUsed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasUsed()));
};


/**
 * optional bytes gas_used = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasUsed()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.tx.TxExecutionResult.prototype.getGasUsed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasUsed()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.tx.TxExecutionResult} returns this
 */
proto.tolar.proto.tx.TxExecutionResult.prototype.setGasUsed = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes gas_refunded = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.tx.TxExecutionResult.prototype.getGasRefunded = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes gas_refunded = 2;
 * This is a type-conversion wrapper around `getGasRefunded()`
 * @return {string}
 */
proto.tolar.proto.tx.TxExecutionResult.prototype.getGasRefunded_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasRefunded()));
};


/**
 * optional bytes gas_refunded = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasRefunded()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.tx.TxExecutionResult.prototype.getGasRefunded_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasRefunded()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.tx.TxExecutionResult} returns this
 */
proto.tolar.proto.tx.TxExecutionResult.prototype.setGasRefunded = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes new_address = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.tx.TxExecutionResult.prototype.getNewAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes new_address = 3;
 * This is a type-conversion wrapper around `getNewAddress()`
 * @return {string}
 */
proto.tolar.proto.tx.TxExecutionResult.prototype.getNewAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNewAddress()));
};


/**
 * optional bytes new_address = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNewAddress()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.tx.TxExecutionResult.prototype.getNewAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNewAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.tx.TxExecutionResult} returns this
 */
proto.tolar.proto.tx.TxExecutionResult.prototype.setNewAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes output = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.tx.TxExecutionResult.prototype.getOutput = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes output = 4;
 * This is a type-conversion wrapper around `getOutput()`
 * @return {string}
 */
proto.tolar.proto.tx.TxExecutionResult.prototype.getOutput_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOutput()));
};


/**
 * optional bytes output = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOutput()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.tx.TxExecutionResult.prototype.getOutput_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOutput()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.tx.TxExecutionResult} returns this
 */
proto.tolar.proto.tx.TxExecutionResult.prototype.setOutput = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bool excepted = 5;
 * @return {boolean}
 */
proto.tolar.proto.tx.TxExecutionResult.prototype.getExcepted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tolar.proto.tx.TxExecutionResult} returns this
 */
proto.tolar.proto.tx.TxExecutionResult.prototype.setExcepted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tolar.proto.tx.LogEntry.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.tx.LogEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.tx.LogEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.tx.LogEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.tx.LogEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    topicsList: msg.getTopicsList_asB64(),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.tx.LogEntry}
 */
proto.tolar.proto.tx.LogEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.tx.LogEntry;
  return proto.tolar.proto.tx.LogEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.tx.LogEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.tx.LogEntry}
 */
proto.tolar.proto.tx.LogEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTopics(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.tx.LogEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.tx.LogEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.tx.LogEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.tx.LogEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTopicsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.tx.LogEntry.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.tolar.proto.tx.LogEntry.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.tx.LogEntry.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.tx.LogEntry} returns this
 */
proto.tolar.proto.tx.LogEntry.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes topics = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.tolar.proto.tx.LogEntry.prototype.getTopicsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes topics = 2;
 * This is a type-conversion wrapper around `getTopicsList()`
 * @return {!Array<string>}
 */
proto.tolar.proto.tx.LogEntry.prototype.getTopicsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTopicsList()));
};


/**
 * repeated bytes topics = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopicsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.tolar.proto.tx.LogEntry.prototype.getTopicsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTopicsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.tolar.proto.tx.LogEntry} returns this
 */
proto.tolar.proto.tx.LogEntry.prototype.setTopicsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.tolar.proto.tx.LogEntry} returns this
 */
proto.tolar.proto.tx.LogEntry.prototype.addTopics = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tolar.proto.tx.LogEntry} returns this
 */
proto.tolar.proto.tx.LogEntry.prototype.clearTopicsList = function() {
  return this.setTopicsList([]);
};


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tolar.proto.tx.LogEntry.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.tolar.proto.tx.LogEntry.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.tolar.proto.tx.LogEntry.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tolar.proto.tx.LogEntry} returns this
 */
proto.tolar.proto.tx.LogEntry.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tolar.proto.tx.ExecutedTransaction.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tolar.proto.tx.ExecutedTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.tolar.proto.tx.ExecutedTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tolar.proto.tx.ExecutedTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.tx.ExecutedTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    signedTransaction: (f = msg.getSignedTransaction()) && proto.tolar.proto.tx.SignedTransaction.toObject(includeInstance, f),
    executionResult: (f = msg.getExecutionResult()) && proto.tolar.proto.tx.TxExecutionResult.toObject(includeInstance, f),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.tolar.proto.tx.LogEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tolar.proto.tx.ExecutedTransaction}
 */
proto.tolar.proto.tx.ExecutedTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tolar.proto.tx.ExecutedTransaction;
  return proto.tolar.proto.tx.ExecutedTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tolar.proto.tx.ExecutedTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tolar.proto.tx.ExecutedTransaction}
 */
proto.tolar.proto.tx.ExecutedTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tolar.proto.tx.SignedTransaction;
      reader.readMessage(value,proto.tolar.proto.tx.SignedTransaction.deserializeBinaryFromReader);
      msg.setSignedTransaction(value);
      break;
    case 2:
      var value = new proto.tolar.proto.tx.TxExecutionResult;
      reader.readMessage(value,proto.tolar.proto.tx.TxExecutionResult.deserializeBinaryFromReader);
      msg.setExecutionResult(value);
      break;
    case 3:
      var value = new proto.tolar.proto.tx.LogEntry;
      reader.readMessage(value,proto.tolar.proto.tx.LogEntry.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tolar.proto.tx.ExecutedTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tolar.proto.tx.ExecutedTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tolar.proto.tx.ExecutedTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tolar.proto.tx.ExecutedTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignedTransaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tolar.proto.tx.SignedTransaction.serializeBinaryToWriter
    );
  }
  f = message.getExecutionResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tolar.proto.tx.TxExecutionResult.serializeBinaryToWriter
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.tolar.proto.tx.LogEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional SignedTransaction signed_transaction = 1;
 * @return {?proto.tolar.proto.tx.SignedTransaction}
 */
proto.tolar.proto.tx.ExecutedTransaction.prototype.getSignedTransaction = function() {
  return /** @type{?proto.tolar.proto.tx.SignedTransaction} */ (
    jspb.Message.getWrapperField(this, proto.tolar.proto.tx.SignedTransaction, 1));
};


/**
 * @param {?proto.tolar.proto.tx.SignedTransaction|undefined} value
 * @return {!proto.tolar.proto.tx.ExecutedTransaction} returns this
*/
proto.tolar.proto.tx.ExecutedTransaction.prototype.setSignedTransaction = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tolar.proto.tx.ExecutedTransaction} returns this
 */
proto.tolar.proto.tx.ExecutedTransaction.prototype.clearSignedTransaction = function() {
  return this.setSignedTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tolar.proto.tx.ExecutedTransaction.prototype.hasSignedTransaction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TxExecutionResult execution_result = 2;
 * @return {?proto.tolar.proto.tx.TxExecutionResult}
 */
proto.tolar.proto.tx.ExecutedTransaction.prototype.getExecutionResult = function() {
  return /** @type{?proto.tolar.proto.tx.TxExecutionResult} */ (
    jspb.Message.getWrapperField(this, proto.tolar.proto.tx.TxExecutionResult, 2));
};


/**
 * @param {?proto.tolar.proto.tx.TxExecutionResult|undefined} value
 * @return {!proto.tolar.proto.tx.ExecutedTransaction} returns this
*/
proto.tolar.proto.tx.ExecutedTransaction.prototype.setExecutionResult = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tolar.proto.tx.ExecutedTransaction} returns this
 */
proto.tolar.proto.tx.ExecutedTransaction.prototype.clearExecutionResult = function() {
  return this.setExecutionResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tolar.proto.tx.ExecutedTransaction.prototype.hasExecutionResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated LogEntry logs = 3;
 * @return {!Array<!proto.tolar.proto.tx.LogEntry>}
 */
proto.tolar.proto.tx.ExecutedTransaction.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.tolar.proto.tx.LogEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tolar.proto.tx.LogEntry, 3));
};


/**
 * @param {!Array<!proto.tolar.proto.tx.LogEntry>} value
 * @return {!proto.tolar.proto.tx.ExecutedTransaction} returns this
*/
proto.tolar.proto.tx.ExecutedTransaction.prototype.setLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.tolar.proto.tx.LogEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tolar.proto.tx.LogEntry}
 */
proto.tolar.proto.tx.ExecutedTransaction.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.tolar.proto.tx.LogEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tolar.proto.tx.ExecutedTransaction} returns this
 */
proto.tolar.proto.tx.ExecutedTransaction.prototype.clearLogsList = function() {
  return this.setLogsList([]);
};


goog.object.extend(exports, proto.tolar.proto.tx);
